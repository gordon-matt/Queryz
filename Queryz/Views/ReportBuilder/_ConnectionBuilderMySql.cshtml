<div id="connection-details-content">
    <div class="row mb-3">
        <div class="mb-3 col-12 col-sm-5 col-md-5 col-lg-5">
            @Html.Label("Report_Server", "Server", new { @class = "form-label" })
            @Html.TextBox("Report_Server", null, new { @class = "form-control", data_bind = "value: dataSourceModel.server, event: { blur: $root.getDatabases }", required = "required" })
        </div>
        <div class="mb-3 col-12 col-sm-2 col-md-2 col-lg-2">
            @Html.Label("Report_Port", "Port", new { @class = "form-label" })
            @Html.TextBox("Report_Port", null, new { @class = "form-control", type = "number", data_bind = "value: dataSourceModel.port, event: { blur: $root.getDatabases }", required = "required" })
        </div>
        <div class="mb-3 col-12 col-sm-5 col-md-5 col-lg-5">
            @Html.Label("Report_Database", "Database", new { @class = "form-label" })
            <select id="Report_Database" name="Report_Database" class="form-select" data-bind="value: dataSourceModel.database" required></select>
            <div id="databases-loading-progress" class="text-info mt-1" style="display: none;">Please Wait…</div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="mb-3 col-12 col-sm-6 col-md-6 col-lg-6">
            @Html.Label("Report_UserId", "User ID", new { @class = "form-label" })
            @Html.TextBox("Report_UserId", null, new { @class = "form-control", data_bind = "value: dataSourceModel.userId, event: { blur: dataSourceModel.getDatabases }", required = "required" })
        </div>
        <div class="mb-3 col-12 col-sm-6 col-md-6 col-lg-6">
            @Html.Label("Report_Password", "Password", new { @class = "form-label" })
            @Html.Password("Report_Password", null, new { @class = "form-control", data_bind = "value: dataSourceModel.password, event: { blur: dataSourceModel.getDatabases }", required = "required" })
        </div>
    </div>
</div>

<script type="text/javascript">
    function updateModel(viewModel, data) {
        viewModel.server = ko.observable(null);
        viewModel.port = ko.observable(3306);
        viewModel.database = ko.observable(null);
        viewModel.userId = ko.observable(null);
        viewModel.password = ko.observable(null);

        viewModel.getDatabases = function () {
            if (!viewModel.server()) {
                return false;
            }

            if (!viewModel.userId() || !viewModel.password()) {
                return false;
            }

            const progress = document.getElementById("databases-loading-progress");
            const select = document.getElementById("Report_Database");

            // Show loading progress
            progress.style.display = "block";

            // Clear existing options
            select.innerHTML = "";

            const connectionInfo = {
                Server: viewModel.server(),
                Port: viewModel.port(),
                UserId: viewModel.userId(),
                Password: viewModel.password()
            };

            if (viewModel.database()) {
                connectionInfo.Database = viewModel.database();
            }

            try {
                const response = fetch("/report-builder/get-databases", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json; charset=utf-8",
                    },
                    body: JSON.stringify({
                        provider: 2, // MySQL
                        connectionDetails: ko.mapping.toJSON(connectionInfo)
                    })
                })
                .then(response => {
                    if (!response.ok) throw new Error("Network response was not ok");
                    return response.json();
                })
                .then(json => {
                    if (json.success) {
                        // Add new options
                        json.databases.forEach(database => {
                            const option = new Option(database, database);
                            select.add(option);
                        });

                        // Hide loading progress
                        progress.style.display = "none";

                        // Set first value
                        if (select.options.length > 0) {
                            viewModel.database(select.options[0].value);
                        }
                    } else {
                        showNotification(json.message, "error");
                        console.error(json.message);
                    }
                })
            } catch (error) {
                showNotification("Could not load databases", "error");
                console.error("Error:", error);
                progress.style.display = "none";
            }
        };

        // Helper function to replace $.notify
        function showNotification(message, type) {
            // Replace this with your preferred notification system
            console[type === "error" ? "error" : "log"](message);
            // If you're using a notification library, call it here
        }

        // Initialize with data if provided
        if (data) {
            if (data.Server) viewModel.server(data.Server);
            if (data.Port) viewModel.port(data.Port);
            if (data.UserId) viewModel.userId(data.UserId);
            if (data.Password) viewModel.password(data.Password);
            if (data.Database) {
                viewModel.getDatabases();
                viewModel.database(data.Database);
            }
        }
    };

    function cleanUp(viewModel) {
        delete viewModel.server;
        delete viewModel.port;
        delete viewModel.database;
        delete viewModel.userId;
        delete viewModel.password;
    };

    function onBeforeSave(viewModel) {
        var data = {
            Server: viewModel.server(),
            Port: viewModel.port(),
            Database: viewModel.database(),
            UserId: viewModel.userId(),
            Password: viewModel.password()
        };

        viewModel.connectionDetails(ko.mapping.toJSON(data));
    };
</script>